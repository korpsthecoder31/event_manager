require 'csv'
require 'google/apis/civicinfo_v2'
require 'erb'

# CHECKS IF FILE EXISTS
# exist = File.exist? 'event_attendees.csv'
# puts exist

# READS ENTIRE FILE
# contents = File.read('event_attendees.csv')
# puts contents

# READS FILE LINE BY LINE
# file = 'event_attendees.csv'

# lines = File.readlines(file) 
# lines.each_with_index do |line, index|
#   next if index == 0
#   columns = line.split(",")
#   first_names = columns[2]
#   puts first_names
# end

# INITIAL CLEAN ZIP CODE METHOD
# def clean_zip_code(zipcode)
#   if zipcode == nil
#     zipcode = '00000'
#   elsif zipcode.length > 5
#     zipcode = zipcode[0..4]
#   else zipcode.length < 5
#     zipcode = zipcode.rjust(5, '0')
#   end
# end

def clean_zip_code(zipcode)
  zipcode.to_s.rjust(5, '0')[0..4]
end

def clean_phone_numbers(homephone)
  homephone = homephone.gsub(/\D/, "")
  
  if homephone.length == 10
    homephone
  elsif homephone.length == 11 && homephone[0] == '1'
    homephone[1..homephone.length - 1]
  else
    "Invalid Number."
  end

end

def legislators_by_zipcode(zipcode)
  civicinfo = Google::Apis::CivicinfoV2 
  service = civicinfo::CivicInfoService.new  # create new instance of civicinfo_v2
  service.key = 'AIzaSyClRzDqDh5MsXwnCWi0kOiiBivP6JsSyBw' # assign key (this is usually generated by user but provided by Odin Project for purposes of lesson)

  begin
    legislators = service.representative_info_by_address(
      address: zipcode,
      levels: 'country',
      roles: ['legislatorUpperBody', 'legislatorLowerBody']
    ).officials
  
  rescue 
    'You can find your representatives by visiting www.commoncause.org/take-action/find-elected-officials'
  end
end

def save_thank_you_letter(id, form_letter)

  Dir.mkdir('output') unless Dir.exist?('output')

  filename = "output/thanks_#{id}.html"

  File.open(filename, 'w') do |file|
    puts form_letter
  end
end

puts 'Event Manager Initialized!'
puts ''

contents = CSV.open(
  'event_attendees.csv', 
  headers: true, 
  header_converters: :symbol
)

template_letter = File.read('form_letter.erb')
erb_template = ERB.new template_letter

contents.each do |row|
  id = row[0]
  name = row[:first_name]
  
  zipcode = clean_zip_code(row[:zipcode])

  legislators = legislators_by_zipcode(zipcode)

  phone_numbers = clean_phone_numbers(row[:homephone])

  form_letter = erb_template.result(binding)
  #puts form_letter
  #save_thank_you_letter(id, form_letter)
end

